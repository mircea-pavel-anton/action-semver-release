---
name: Semantic Release Action
description: Creates a new release using Semantic Versioning.
author: Mircea-Pavel Anton

inputs:
  dry-run:
    description: "Perform a dry run without creating an actual release"
    required: false
    default: "false"
  github-token:
    description: "GitHub token with repository access"
    required: true
  version-increment:
    description: "Version increment strategy (major, minor, patch, prerelease or auto)"
    required: false
    default: "auto"

runs:
  using: "composite"
  steps:
    - name: Setup Go
      uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
      with:
        go-version: "stable"

    - name: Install SVU
      shell: bash
      run: go install github.com/caarlos0/svu/v3@v3.2.3

    - name: Update job summary
      shell: bash
      run: |
        echo "## 🔨 Setting up the environment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Installed SVU (Semantic Version Util)" >> $GITHUB_STEP_SUMMARY

    - name: Determine next version
      shell: bash
      run: |
        # Map action input to SVU command
        if [ "${{ inputs.version-increment }}" = "auto" ]; then
          SVU_COMMAND="next"
        else
          SVU_COMMAND="${{ inputs.version-increment }}"
        fi

        # Get next version using SVU
        NEXT_VERSION=$(svu $SVU_COMMAND)

        # Get current version for summary
        CURRENT_VERSION=$(svu current 2>/dev/null || echo "none")

        echo "Next version: $NEXT_VERSION (tag: $NEXT_VERSION)"
        echo "RELEASE_TAG=$NEXT_VERSION" >> $GITHUB_ENV

        # Add to step summary
        echo "## 📊 Version Information" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| **Version Type** | **Value** |" >> $GITHUB_STEP_SUMMARY
        echo "| :--- | :---: |" >> $GITHUB_STEP_SUMMARY
        echo "| Current Version | \`$CURRENT_VERSION\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Next Version | \`$NEXT_VERSION\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Increment Strategy | \`${{ inputs.version-increment }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Generate basic release notes
      shell: bash
      run: |
        # Get previous tag or empty if none exists
        PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        # Generate notes from commit log
        if [ -z "$PREV_TAG" ]; then
          NOTES=$(git log --pretty=format:"* %s (%h)" --no-merges)
          COMMIT_COUNT=$(git rev-list --count HEAD)
          COMMIT_RANGE="Initial commit to \`HEAD\`"
        else
          # if a tag exists, only use commits since that tag
          NOTES=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          COMMIT_COUNT=$(git rev-list --count ${PREV_TAG}..HEAD)
          COMMIT_RANGE="\`${PREV_TAG}\` to HEAD"
        fi

        # Save release notes to environment variable
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        # Count conventional commit types for summary
        BREAKING_COUNT=$(echo "$NOTES" | grep -c "^* \(.*\)!:")
        FEAT_COUNT=$(echo "$NOTES" | grep -c "^* feat")
        FIX_COUNT=$(echo "$NOTES" | grep -c "^* fix")
        DOCS_COUNT=$(echo "$NOTES" | grep -c "^* docs")
        REFACTOR_COUNT=$(echo "$NOTES" | grep -c "^* refactor")
        TEST_COUNT=$(echo "$NOTES" | grep -c "^* test")
        CHORE_COUNT=$(echo "$NOTES" | grep -c "^* chore")
        CI_COUNT=$(echo "$NOTES" | grep -c "^* ci")

        # Add to step summary
        echo "## 📝 Release Notes Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Analyzed commits from $COMMIT_RANGE" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit Type** | **Count** |" >> $GITHUB_STEP_SUMMARY
        echo "| :--- | ---: |" >> $GITHUB_STEP_SUMMARY
        echo "| 💥 Breaking Changes | $BREAKING_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| ✨ Features | $FEAT_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐛 Bug Fixes | $FIX_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| 📚 Documentation | $DOCS_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| ♻️ Refactoring | $REFACTOR_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | $TEST_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔧 Chores | $CHORE_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| 👷 CI | $CI_COUNT |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total Commits** | **$COMMIT_COUNT** |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Add release notes to summary
        echo "### 📋 Release Notes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "$NOTES" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY

    - name: Create GitHub Release
      if: inputs.dry-run != 'true'
      shell: bash
      run: |
        gh release create "${{ env.RELEASE_TAG }}" \
          --title "${{ env.RELEASE_TAG }}" \
          --notes "${{ env.RELEASE_NOTES }}"

        # Add to step summary
        echo "## 🚀 Release Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Release successfully created!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| **Release Info** | **Details** |" >> $GITHUB_STEP_SUMMARY
        echo "| :--- | :--- |" >> $GITHUB_STEP_SUMMARY
        echo "| Version | \`${{ env.RELEASE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| URL | https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }} |" >> $GITHUB_STEP_SUMMARY
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Dry Run Summary
      if: inputs.dry-run == 'true'
      shell: bash
      run: |
        echo "## 🔍 Dry Run Mode" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **This was a dry run. No release was created.**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If this was a real run, version \`${{ env.RELEASE_TAG }}\` would have been created." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To create an actual release, set \`dry-run: false\` in your workflow." >> $GITHUB_STEP_SUMMARY
