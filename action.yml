---
name: Semantic Release Action
description: Creates a new release using Semantic Versioning.
author: Mircea-Pavel Anton

inputs:
  dry-run:
    description: "Perform a dry run without creating an actual release"
    required: false
    default: "false"
  draft:
    description: "Mark the release as a draft (unpublished)"
    required: false
    default: "false"
  github-token:
    description: "GitHub token with repository access"
    required: true
  version-increment:
    description: "Version increment strategy (major, minor, patch, prerelease or auto)"
    required: false
    default: "auto"

outputs:
  old_version:
    description: "The current version before the release"
    value: ${{ steps.determine-version.outputs.old_version }}
  next_version:
    description: "The next version determined for the release"
    value: ${{ steps.determine-version.outputs.next_version }}

  commit_count:
    description: "Number of commits included in this release"
    value: ${{ steps.generate-notes.outputs.commit_count }}
  breaking_count:
    description: "Number of breaking change commits"
    value: ${{ steps.count-commits.outputs.breaking_count }}
  feature_count:
    description: "Number of feature commits"
    value: ${{ steps.count-commits.outputs.feature_count }}
  fix_count:
    description: "Number of fix commits"
    value: ${{ steps.count-commits.outputs.fix_count }}

  release_url:
    description: "URL of the created GitHub release"
    value: ${{ steps.create-release.outputs.release_url || steps.dry-run-summary.outputs.release_url }}

runs:
  using: "composite"
  steps:
    - name: Setup Go
      uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
      with:
        go-version: "stable"

    - name: Install SVU
      shell: bash
      run: go install github.com/caarlos0/svu/v3@v3.2.3

    - name: Determine next version
      id: determine-version
      shell: bash
      run: |
        # Map action input to SVU command
        if [ "${{ inputs.version-increment }}" = "auto" ]; then
          SVU_COMMAND="next"
        elif [ "${{ inputs.version-increment }}" = "prerelease" ]; then
          SVU_COMMAND="prerelease --prerelease=rc"
        else
          SVU_COMMAND="${{ inputs.version-increment }}"
        fi

        # Get next version using SVU
        NEXT_VERSION=$(svu $SVU_COMMAND)

        # Get current version for summary
        CURRENT_VERSION=$(svu current 2>/dev/null || echo "none")

        echo "Next version: $NEXT_VERSION (tag: $NEXT_VERSION)"
        echo "RELEASE_TAG=$NEXT_VERSION" >> $GITHUB_ENV
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

        echo "old_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

        if [ "$CURRENT_VERSION" = "$NEXT_VERSION" ]; then
          echo "NO_CHANGES=true" >> $GITHUB_ENV
        else
          echo "NO_CHANGES=false" >> $GITHUB_ENV
        fi

    - name: Version Summary
      shell: bash
      run: |
        echo "## 📊 Version Information" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| **Version Type** | **Value** |" >> $GITHUB_STEP_SUMMARY
        echo "| :--- | :---: |" >> $GITHUB_STEP_SUMMARY
        echo "| Current Version | \`${{ env.CURRENT_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Next Version | \`${{ env.RELEASE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Increment Strategy | \`${{ inputs.version-increment }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ env.NO_CHANGES }}" = "true" ]; then
          echo "## ℹ️ No Changes to Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The current and next versions are the same." >> $GITHUB_STEP_SUMMARY
          echo "There are no changes to release. Exiting early." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi

    - name: Generate release notes
      if: env.NO_CHANGES != 'true'
      shell: bash
      id: generate-notes
      run: |
        set -e
        # Get previous tag or empty if none exists
        PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        # Generate notes from commit log
        if [ -z "$PREV_TAG" ]; then
          NOTES=$(git log --pretty=format:"* %s (%h)" --no-merges)
          # Fix for commit count - ensure we're not counting the merge commit
          COMMIT_COUNT=$(git rev-list --count --no-merges HEAD)
          COMMIT_RANGE="Initial commit to \`HEAD\`"
        else
          # if a tag exists, only use commits since that tag
          NOTES=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          # Fix for commit count - ensure we're not counting the merge commit
          COMMIT_COUNT=$(git rev-list --count --no-merges ${PREV_TAG}..HEAD)
          COMMIT_RANGE="${PREV_TAG} to HEAD"
        fi

        # Save release notes to environment variable
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV
        echo "COMMIT_RANGE=$COMMIT_RANGE" >> $GITHUB_ENV

        echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

    - name: Count commits by type
      if: env.NO_CHANGES != 'true'
      shell: bash
      id: count-commits
      run: |
        count_commits() {
          local pattern="$1"
          local count
          count=$(echo "${{ env.RELEASE_NOTES }}" | grep -c "$pattern" || true)
          echo "$count" | tr -d '\n'
        }

        BREAKING_COUNT=$(count_commits "^* .*!:")
        echo "BREAKING_COUNT=$BREAKING_COUNT" >> $GITHUB_ENV
        FEAT_COUNT=$(count_commits "^* feat")
        echo "FEAT_COUNT=$FEAT_COUNT" >> $GITHUB_ENV
        FIX_COUNT=$(count_commits "^* fix")
        echo "FIX_COUNT=$FIX_COUNT" >> $GITHUB_ENV
        DOCS_COUNT=$(count_commits "^* docs")
        echo "DOCS_COUNT=$DOCS_COUNT" >> $GITHUB_ENV
        REFACTOR_COUNT=$(count_commits "^* refactor")
        echo "REFACTOR_COUNT=$REFACTOR_COUNT" >> $GITHUB_ENV
        TEST_COUNT=$(count_commits "^* test")
        echo "TEST_COUNT=$TEST_COUNT" >> $GITHUB_ENV
        CHORE_COUNT=$(count_commits "^* chore")
        echo "CHORE_COUNT=$CHORE_COUNT" >> $GITHUB_ENV
        CI_COUNT=$(count_commits "^* ci")
        echo "CI_COUNT=$CI_COUNT" >> $GITHUB_ENV

        CONVENTIONAL_COUNT=$((BREAKING_COUNT + FEAT_COUNT + FIX_COUNT + DOCS_COUNT + REFACTOR_COUNT + TEST_COUNT + CHORE_COUNT + CI_COUNT))
        echo "CONVENTIONAL_COUNT=$CONVENTIONAL_COUNT" >> $GITHUB_ENV

        UNRECOGNIZED_COUNT=$((${{ env.COMMIT_COUNT }} - CONVENTIONAL_COUNT))
        echo "UNRECOGNIZED_COUNT=$UNRECOGNIZED_COUNT" >> $GITHUB_ENV

        echo "breaking_count=$BREAKING_COUNT" >> $GITHUB_OUTPUT
        echo "feature_count=$FEAT_COUNT" >> $GITHUB_OUTPUT
        echo "fix_count=$FIX_COUNT" >> $GITHUB_OUTPUT

    - name: Release Notes Summary
      if: env.NO_CHANGES != 'true'
      shell: bash
      run: |
        echo "## 📝 Release Notes Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Analyzed commits from ${{ env.COMMIT_RANGE }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit Type** | **Count** |" >> $GITHUB_STEP_SUMMARY
        echo "| :--- | ---: |" >> $GITHUB_STEP_SUMMARY
        echo "| 💥 Breaking Changes | ${{ env.BREAKING_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ✨ Features | ${{ env.FEAT_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐛 Bug Fixes | ${{ env.FIX_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📚 Documentation | ${{ env.DOCS_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ♻️ Refactoring | ${{ env.REFACTOR_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ env.TEST_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔧 Chores | ${{ env.CHORE_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 👷 CI | ${{ env.CI_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ❓ Unrecognized | ${{ env.UNRECOGNIZED_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total Commits** | **${{ env.COMMIT_COUNT }}** |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "### 📋 Release Notes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```markdown' >> $GITHUB_STEP_SUMMARY
        echo "${{ env.RELEASE_NOTES }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY

    - name: Create GitHub Release
      id: create-release
      if: inputs.dry-run != 'true' && env.NO_CHANGES != 'true'
      shell: bash
      run: |
        EXTRA_FLAGS=""
        if [ "${{ inputs.draft }}" = "true" ]; then
          EXTRA_FLAGS="${EXTRA_FLAGS} --draft"
        fi

        gh release create "${{ env.RELEASE_TAG }}" \
          --title "${{ env.RELEASE_TAG }}" \
          --notes "${{ env.RELEASE_NOTES }}" \
          ${EXTRA_FLAGS}

        RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }}"
        echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV
        echo "RELEASE_DRAFT=${{ inputs.draft }}" >> $GITHUB_ENV
        echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Release Success Summary
      if: inputs.dry-run != 'true' && env.NO_CHANGES != 'true'
      shell: bash
      run: |
        echo "## 🚀 Release Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Release successfully created!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| **Release Info** | **Details** |" >> $GITHUB_STEP_SUMMARY
        echo "| :--- | :--- |" >> $GITHUB_STEP_SUMMARY
        echo "| Version | \`${{ env.RELEASE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| URL | ${{ env.RELEASE_URL }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Draft | \`${{ env.RELEASE_DRAFT }}\` |" >> $GITHUB_STEP_SUMMARY

    - name: Dry Run Summary
      if: inputs.dry-run == 'true' && env.NO_CHANGES != 'true'
      id: dry-run-summary
      shell: bash
      run: |
        echo "release_url=" >> $GITHUB_OUTPUT
        echo "## 🔍 Dry Run Mode" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **This was a dry run. No release was created.**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If this was a real run, version \`${{ env.RELEASE_TAG }}\` would have been created." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To create an actual release, run with \`dry-run\` set to \`false\`." >> $GITHUB_STEP_SUMMARY

    - name: Summarize Outputs
      if: env.NO_CHANGES != 'true'
      shell: bash
      env:
        OLD_VERSION: "${{ steps.determine-version.outputs.old_version }}"
        NEXT_VERSION: "${{ steps.determine-version.outputs.next_version }}"
        COMMIT_COUNT: "${{ steps.generate-notes.outputs.commit_count }}"
        BREAKING_COUNT: "${{ steps.count-commits.outputs.breaking_count }}"
        FEATURE_COUNT: "${{ steps.count-commits.outputs.feature_count }}"
        FIX_COUNT: "${{ steps.count-commits.outputs.fix_count }}"
        RELEASE_URL: "${{ steps.create-release.outputs.release_url || steps.dry-run-summary.outputs.release_url }}"
        DRY_RUN: "${{ inputs.dry-run }}"
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📤 Action Outputs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Output | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| old_version | \`$OLD_VERSION\` |" >> $GITHUB_STEP_SUMMARY
        echo "| next_version | \`$NEXT_VERSION\` |" >> $GITHUB_STEP_SUMMARY
        echo "| commit_count | \`$COMMIT_COUNT\` |" >> $GITHUB_STEP_SUMMARY
        echo "| breaking_count | \`$BREAKING_COUNT\` |" >> $GITHUB_STEP_SUMMARY
        echo "| feature_count | \`$FEATURE_COUNT\` |" >> $GITHUB_STEP_SUMMARY
        echo "| fix_count | \`$FIX_COUNT\` |" >> $GITHUB_STEP_SUMMARY
        if [[ "${DRY_RUN}" != "true" ]]; then
          echo "| release_url | [$RELEASE_URL]($RELEASE_URL) |" >> $GITHUB_STEP_SUMMARY
        fi
