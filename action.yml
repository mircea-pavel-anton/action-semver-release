---
name: Semantic Release Action
description: Creates a new release using Semantic Versioning.
author: Mircea-Pavel Anton

inputs:
  dry-run:
    description: "Perform a dry run without creating an actual release"
    required: false
    default: "false"
  github-token:
    description: "GitHub token with repository access"
    required: true
  version-increment:
    description: "Version increment strategy (major, minor, patch, prerelease or auto)"
    required: false
    default: "auto"

runs:
  using: "composite"
  steps:
    - name: Setup Go
      uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
      with:
        go-version: "stable"

    - name: Install SVU
      shell: bash
      run: go install github.com/caarlos0/svu/v3@v3.2.3

    - name: Setup Summary - Environment
      shell: bash
      run: |
        echo "## 🔨 Setting up the environment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Installed SVU (Semantic Version Util)" >> $GITHUB_STEP_SUMMARY

    - name: Determine next version
      shell: bash
      run: |
        # Map action input to SVU command
        if [ "${{ inputs.version-increment }}" = "auto" ]; then
          SVU_COMMAND="next"
        else
          SVU_COMMAND="${{ inputs.version-increment }}"
        fi

        # Get next version using SVU
        NEXT_VERSION=$(svu $SVU_COMMAND)

        # Get current version for summary
        CURRENT_VERSION=$(svu current 2>/dev/null || echo "none")

        echo "Next version: $NEXT_VERSION (tag: $NEXT_VERSION)"
        echo "RELEASE_TAG=$NEXT_VERSION" >> $GITHUB_ENV
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

    - name: Version Summary
      shell: bash
      run: |
        echo "## 📊 Version Information" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| **Version Type** | **Value** |" >> $GITHUB_STEP_SUMMARY
        echo "| :--- | :---: |" >> $GITHUB_STEP_SUMMARY
        echo "| Current Version | \`${{ env.CURRENT_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Next Version | \`${{ env.RELEASE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Increment Strategy | \`${{ inputs.version-increment }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Generate release notes
      shell: bash
      id: generate-notes
      run: |
        set -e
        # Get previous tag or empty if none exists
        PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        # Generate notes from commit log
        if [ -z "$PREV_TAG" ]; then
          NOTES=$(git log --pretty=format:"* %s (%h)" --no-merges)
          # Fix for commit count - ensure we're not counting the merge commit
          COMMIT_COUNT=$(git rev-list --count --no-merges HEAD)
          COMMIT_RANGE="Initial commit to \`HEAD\`"
        else
          # if a tag exists, only use commits since that tag
          NOTES=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          # Fix for commit count - ensure we're not counting the merge commit
          COMMIT_COUNT=$(git rev-list --count --no-merges ${PREV_TAG}..HEAD)
          COMMIT_RANGE="\`${PREV_TAG}\` to \`HEAD\`"
        fi

        # Save release notes to environment variable
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

        # Count conventional commit types for summary
        # Using a function to properly handle the grep counts
        count_commits() {
          local pattern="$1"
          local count
          count=$(echo "$NOTES" | grep -c "$pattern" || true)
          # Strip any trailing newlines from the count
          echo "$count" | tr -d '\n'
        }

        # Export counts to environment variables
        echo "BREAKING_COUNT=$(count_commits "^* .*!:")" >> $GITHUB_ENV
        echo "FEAT_COUNT=$(count_commits "^* feat")" >> $GITHUB_ENV
        echo "FIX_COUNT=$(count_commits "^* fix")" >> $GITHUB_ENV
        echo "DOCS_COUNT=$(count_commits "^* docs")" >> $GITHUB_ENV
        echo "REFACTOR_COUNT=$(count_commits "^* refactor")" >> $GITHUB_ENV
        echo "TEST_COUNT=$(count_commits "^* test")" >> $GITHUB_ENV
        echo "CHORE_COUNT=$(count_commits "^* chore")" >> $GITHUB_ENV
        echo "CI_COUNT=$(count_commits "^* ci")" >> $GITHUB_ENV
        echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV
        echo "COMMIT_RANGE=$COMMIT_RANGE" >> $GITHUB_ENV

    - name: Release Notes Summary
      shell: bash
      run: |
        echo "## 📝 Release Notes Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Analyzed commits from ${{ env.COMMIT_RANGE }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit Type** | **Count** |" >> $GITHUB_STEP_SUMMARY
        echo "| :--- | ---: |" >> $GITHUB_STEP_SUMMARY
        echo "| 💥 Breaking Changes | ${{ env.BREAKING_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ✨ Features | ${{ env.FEAT_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐛 Bug Fixes | ${{ env.FIX_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📚 Documentation | ${{ env.DOCS_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| ♻️ Refactoring | ${{ env.REFACTOR_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ env.TEST_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔧 Chores | ${{ env.CHORE_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 👷 CI | ${{ env.CI_COUNT }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total Commits** | **${{ env.COMMIT_COUNT }}** |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "### 📋 Release Notes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```markdown' >> $GITHUB_STEP_SUMMARY
        echo "${{ env.RELEASE_NOTES }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY

    - name: Create GitHub Release
      if: inputs.dry-run != 'true'
      shell: bash
      run: |
        gh release create "${{ env.RELEASE_TAG }}" \
          --title "${{ env.RELEASE_TAG }}" \
          --notes "${{ env.RELEASE_NOTES }}"
      env:
        GH_TOKEN: ${{ inputs.github-token }}

    - name: Release Success Summary
      if: inputs.dry-run != 'true'
      shell: bash
      run: |
        echo "## 🚀 Release Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Release successfully created!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| **Release Info** | **Details** |" >> $GITHUB_STEP_SUMMARY
        echo "| :--- | :--- |" >> $GITHUB_STEP_SUMMARY
        echo "| Version | \`${{ env.RELEASE_TAG }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| URL | https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }} |" >> $GITHUB_STEP_SUMMARY

    - name: Dry Run Summary
      if: inputs.dry-run == 'true'
      shell: bash
      run: |
        echo "## 🔍 Dry Run Mode" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **This was a dry run. No release was created.**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If this was a real run, version \`${{ env.RELEASE_TAG }}\` would have been created." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "To create an actual release, run with \`dry-run\` set to \`false\`." >> $GITHUB_STEP_SUMMARY
